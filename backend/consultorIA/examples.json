[
  {
    "question": "Mostrar todos los clientes que hicieron pedidos en enero de 2024",
    "sql": "SELECT * FROM pedidos WHERE fecha BETWEEN '2024-01-01' AND '2024-01-31';"
  },
  {
    "question": "Listar productos con stock menor a 10",
    "sql": "SELECT nombre, stock FROM productos WHERE stock < 10;"
  },
  {
    "question": "Obtener el nombre y email de todos los usuarios activos",
    "sql": "SELECT nombre, email FROM usuarios WHERE activo = true;"
  },
  {
    "question": "Contar cuántos pedidos se hicieron el mes pasado",
    "sql": "SELECT COUNT(*) FROM pedidos WHERE fecha >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"
  },
  {
    "question": "Mostrar los 5 productos más caros",
    "sql": "SELECT * FROM productos ORDER BY precio DESC LIMIT 5;"
  },
  {
    "question": "Listar empleados que ganan más de 50000",
    "sql": "SELECT nombre, apellido, salario FROM empleados WHERE salario > 50000;"
  },
  {
    "question": "Obtener todas las ventas del cliente con ID 123",
    "sql": "SELECT * FROM ventas WHERE cliente_id = 123;"
  },
  {
    "question": "Mostrar productos de la categoría 'Electrónicos' ordenados por precio",
    "sql": "SELECT * FROM productos WHERE categoria = 'Electrónicos' ORDER BY precio;"
  },
  {
    "question": "Contar cuántos clientes hay por ciudad",
    "sql": "SELECT ciudad, COUNT(*) as total_clientes FROM clientes GROUP BY ciudad;"
  },
  {
    "question": "Listar pedidos con valor total mayor a 1000",
    "sql": "SELECT * FROM pedidos WHERE total > 1000;"
  },
  {
    "question": "Obtener el promedio de edad de los empleados",
    "sql": "SELECT AVG(edad) as promedio_edad FROM empleados;"
  },
  {
    "question": "Mostrar productos que contienen 'iPhone' en el nombre",
    "sql": "SELECT * FROM productos WHERE nombre LIKE '%iPhone%';"
  },
  {
    "question": "Listar clientes registrados en los últimos 30 días",
    "sql": "SELECT * FROM clientes WHERE fecha_registro >= DATE_SUB(CURDATE(), INTERVAL 30 DAY);"
  },
  {
    "question": "Obtener la venta más alta de cada vendedor",
    "sql": "SELECT vendedor_id, MAX(total) as venta_maxima FROM ventas GROUP BY vendedor_id;"
  },
  {
    "question": "Mostrar empleados del departamento de 'Ventas' ordenados por antigüedad",
    "sql": "SELECT * FROM empleados WHERE departamento = 'Ventas' ORDER BY fecha_ingreso;"
  },
  {
    "question": "Contar pedidos por estado",
    "sql": "SELECT estado, COUNT(*) as cantidad FROM pedidos GROUP BY estado;"
  },
  {
    "question": "Listar productos sin stock disponible",
    "sql": "SELECT * FROM productos WHERE stock = 0 OR stock IS NULL;"
  },
  {
    "question": "Obtener clientes que no han hecho pedidos",
    "sql": "SELECT * FROM clientes WHERE id NOT IN (SELECT DISTINCT cliente_id FROM pedidos WHERE cliente_id IS NOT NULL);"
  },
  {
    "question": "Mostrar facturas vencidas",
    "sql": "SELECT * FROM facturas WHERE fecha_vencimiento < CURDATE() AND estado != 'Pagada';"
  },
  {
    "question": "Listar los 10 clientes con más pedidos",
    "sql": "SELECT cliente_id, COUNT(*) as total_pedidos FROM pedidos GROUP BY cliente_id ORDER BY total_pedidos DESC LIMIT 10;"
  },
  {
    "question": "Obtener productos con precio entre 100 y 500",
    "sql": "SELECT * FROM productos WHERE precio BETWEEN 100 AND 500;"
  },
  {
    "question": "Mostrar empleados que cumplen años este mes",
    "sql": "SELECT * FROM empleados WHERE MONTH(fecha_nacimiento) = MONTH(CURDATE());"
  },
  {
    "question": "Contar ventas por mes del año actual",
    "sql": "SELECT MONTH(fecha) as mes, COUNT(*) as total_ventas FROM ventas WHERE YEAR(fecha) = YEAR(CURDATE()) GROUP BY MONTH(fecha);"
  },
  {
    "question": "Listar productos descontinuados",
    "sql": "SELECT * FROM productos WHERE descontinuado = true;"
  },
  {
    "question": "Obtener el total de ingresos por trimestre",
    "sql": "SELECT QUARTER(fecha) as trimestre, SUM(total) as ingresos FROM ventas GROUP BY QUARTER(fecha);"
  },
  {
    "question": "Mostrar clientes de Argentina",
    "sql": "SELECT * FROM clientes WHERE pais = 'Argentina';"
  },
  {
    "question": "Listar pedidos pendientes de envío",
    "sql": "SELECT * FROM pedidos WHERE estado = 'Pendiente' OR estado = 'Procesando';"
  },
  {
    "question": "Obtener productos más vendidos",
    "sql": "SELECT p.nombre, SUM(dv.cantidad) as total_vendido FROM productos p JOIN detalle_ventas dv ON p.id = dv.producto_id GROUP BY p.id, p.nombre ORDER BY total_vendido DESC;"
  },
  {
    "question": "Contar usuarios registrados por año",
    "sql": "SELECT YEAR(fecha_registro) as año, COUNT(*) as nuevos_usuarios FROM usuarios GROUP BY YEAR(fecha_registro);"
  },
  {
    "question": "Mostrar empleados con más de 5 años de antigüedad",
    "sql": "SELECT * FROM empleados WHERE fecha_ingreso <= DATE_SUB(CURDATE(), INTERVAL 5 YEAR);"
  },
  {
    "question": "Listar categorías con más de 10 productos",
    "sql": "SELECT categoria, COUNT(*) as total_productos FROM productos GROUP BY categoria HAVING COUNT(*) > 10;"
  },
  {
    "question": "Obtener el cliente que más ha gastado",
    "sql": "SELECT cliente_id, SUM(total) as total_gastado FROM pedidos GROUP BY cliente_id ORDER BY total_gastado DESC LIMIT 1;"
  },
  {
    "question": "Mostrar pedidos realizados en fin de semana",
    "sql": "SELECT * FROM pedidos WHERE DAYOFWEEK(fecha) IN (1, 7);"
  },
  {
    "question": "Contar productos por proveedor",
    "sql": "SELECT proveedor_id, COUNT(*) as total_productos FROM productos GROUP BY proveedor_id;"
  },
  {
    "question": "Listar empleados sin asignar departamento",
    "sql": "SELECT * FROM empleados WHERE departamento IS NULL OR departamento = '';"
  },
  {
    "question": "Obtener ventas del día de hoy",
    "sql": "SELECT * FROM ventas WHERE DATE(fecha) = CURDATE();"
  },
  {
    "question": "Mostrar productos con descuento aplicado",
    "sql": "SELECT * FROM productos WHERE descuento > 0;"
  },
  {
    "question": "Listar clientes VIP",
    "sql": "SELECT * FROM clientes WHERE tipo = 'VIP' OR categoria = 'Premium';"
  },
  {
    "question": "Contar pedidos entregados vs pendientes",
    "sql": "SELECT estado, COUNT(*) as cantidad FROM pedidos WHERE estado IN ('Entregado', 'Pendiente') GROUP BY estado;"
  },
  {
    "question": "Obtener productos que nunca se han vendido",
    "sql": "SELECT * FROM productos WHERE id NOT IN (SELECT DISTINCT producto_id FROM detalle_ventas WHERE producto_id IS NOT NULL);"
  },
  {
    "question": "Mostrar facturas del último trimestre",
    "sql": "SELECT * FROM facturas WHERE fecha >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH);"
  },
  {
    "question": "Listar empleados ordenados por salario descendente",
    "sql": "SELECT * FROM empleados ORDER BY salario DESC;"
  },
  {
    "question": "Obtener el promedio de ventas por día de la semana",
    "sql": "SELECT DAYNAME(fecha) as dia, AVG(total) as promedio_ventas FROM ventas GROUP BY DAYOFWEEK(fecha), DAYNAME(fecha);"
  },
  {
    "question": "Mostrar clientes que han gastado más de 10000",
    "sql": "SELECT cliente_id, SUM(total) as total_gastado FROM pedidos GROUP BY cliente_id HAVING SUM(total) > 10000;"
  },
  {
    "question": "Contar productos por rango de precio",
    "sql": "SELECT CASE WHEN precio < 100 THEN 'Bajo' WHEN precio BETWEEN 100 AND 500 THEN 'Medio' ELSE 'Alto' END as rango_precio, COUNT(*) as cantidad FROM productos GROUP BY rango_precio;"
  },
  {
    "question": "Listar pedidos con más de 5 artículos",
    "sql": "SELECT p.*, COUNT(dp.producto_id) as total_articulos FROM pedidos p JOIN detalle_pedidos dp ON p.id = dp.pedido_id GROUP BY p.id HAVING COUNT(dp.producto_id) > 5;"
  },
  {
    "question": "Obtener la fecha de la última venta",
    "sql": "SELECT MAX(fecha) as ultima_venta FROM ventas;"
  },
  {
    "question": "Mostrar productos con stock crítico (menos de 5)",
    "sql": "SELECT * FROM productos WHERE stock < 5 AND stock > 0;"
  },
  {
    "question": "Listar clientes por orden alfabético",
    "sql": "SELECT * FROM clientes ORDER BY apellido, nombre;"
  },
  {
    "question": "Contar empleados por género",
    "sql": "SELECT genero, COUNT(*) as cantidad FROM empleados GROUP BY genero;"
  },
  {
    "question": "Obtener ventas superiores al promedio",
    "sql": "SELECT * FROM ventas WHERE total > (SELECT AVG(total) FROM ventas);"
  },
  {
    "question": "Mostrar productos agregados en el último mes",
    "sql": "SELECT * FROM productos WHERE fecha_creacion >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"
  },
  {
    "question": "Listar pedidos cancelados",
    "sql": "SELECT * FROM pedidos WHERE estado = 'Cancelado';"
  },
  {
    "question": "Obtener el total de productos en inventario",
    "sql": "SELECT SUM(stock) as total_inventario FROM productos;"
  },
  {
    "question": "Mostrar empleados próximos a jubilarse (más de 60 años)",
    "sql": "SELECT *, YEAR(CURDATE()) - YEAR(fecha_nacimiento) as edad FROM empleados WHERE YEAR(CURDATE()) - YEAR(fecha_nacimiento) > 60;"
  },
  {
    "question": "Contar pedidos por forma de pago",
    "sql": "SELECT forma_pago, COUNT(*) as cantidad FROM pedidos GROUP BY forma_pago;"
  },
  {
    "question": "Listar productos con garantía extendida",
    "sql": "SELECT * FROM productos WHERE garantia_extendida = true;"
  },
  {
    "question": "Obtener clientes sin email registrado",
    "sql": "SELECT * FROM clientes WHERE email IS NULL OR email = '';"
  },
  {
    "question": "Mostrar las 3 categorías más populares",
    "sql": "SELECT categoria, COUNT(*) as total_productos FROM productos GROUP BY categoria ORDER BY total_productos DESC LIMIT 3;"
  },
  {
    "question": "Listar ventas del primer semestre",
    "sql": "SELECT * FROM ventas WHERE MONTH(fecha) BETWEEN 1 AND 6 AND YEAR(fecha) = YEAR(CURDATE());"
  },
  {
    "question": "Contar productos importados vs nacionales",
    "sql": "SELECT origen, COUNT(*) as cantidad FROM productos GROUP BY origen;"
  },
  {
    "question": "Obtener empleados que trabajan medio tiempo",
    "sql": "SELECT * FROM empleados WHERE tipo_contrato = 'Medio Tiempo';"
  },
  {
    "question": "Mostrar pedidos con envío gratis",
    "sql": "SELECT * FROM pedidos WHERE costo_envio = 0 OR envio_gratis = true;"
  },
  {
    "question": "Listar productos en oferta",
    "sql": "SELECT * FROM productos WHERE en_oferta = true;"
  },
  {
    "question": "Obtener el mes con más ventas",
    "sql": "SELECT MONTH(fecha) as mes, COUNT(*) as total_ventas FROM ventas GROUP BY MONTH(fecha) ORDER BY total_ventas DESC LIMIT 1;"
  },
  {
    "question": "Mostrar clientes con más de 10 pedidos",
    "sql": "SELECT cliente_id, COUNT(*) as total_pedidos FROM pedidos GROUP BY cliente_id HAVING COUNT(*) > 10;"
  },
  {
    "question": "Contar facturas pagadas vs pendientes",
    "sql": "SELECT CASE WHEN fecha_pago IS NOT NULL THEN 'Pagada' ELSE 'Pendiente' END as estado_pago, COUNT(*) as cantidad FROM facturas GROUP BY estado_pago;"
  },
  {
    "question": "Listar productos pesados (más de 1kg)",
    "sql": "SELECT * FROM productos WHERE peso > 1;"
  },
  {
    "question": "Obtener empleados del turno nocturno",
    "sql": "SELECT * FROM empleados WHERE turno = 'Nocturno';"
  },
  {
    "question": "Mostrar pedidos urgentes",
    "sql": "SELECT * FROM pedidos WHERE prioridad = 'Urgente' OR urgente = true;"
  },
  {
    "question": "Contar productos por marca",
    "sql": "SELECT marca, COUNT(*) as total_productos FROM productos GROUP BY marca ORDER BY total_productos DESC;"
  },
  {
    "question": "Listar clientes menores de 25 años",
    "sql": "SELECT *, YEAR(CURDATE()) - YEAR(fecha_nacimiento) as edad FROM clientes WHERE YEAR(CURDATE()) - YEAR(fecha_nacimiento) < 25;"
  },
  {
    "question": "Obtener productos con múltiples variantes",
    "sql": "SELECT producto_base, COUNT(*) as variantes FROM productos WHERE producto_base IS NOT NULL GROUP BY producto_base HAVING COUNT(*) > 1;"
  },
  {
    "question": "Mostrar ventas de productos electrónicos",
    "sql": "SELECT v.* FROM ventas v JOIN detalle_ventas dv ON v.id = dv.venta_id JOIN productos p ON dv.producto_id = p.id WHERE p.categoria = 'Electrónicos';"
  },
  {
    "question": "Listar empleados con certificaciones",
    "sql": "SELECT * FROM empleados WHERE certificaciones IS NOT NULL AND certificaciones != '';"
  },
  {
    "question": "Contar pedidos por región",
    "sql": "SELECT c.region, COUNT(*) as total_pedidos FROM pedidos p JOIN clientes c ON p.cliente_id = c.id GROUP BY c.region;"
  },
  {
    "question": "Obtener productos con rating superior a 4 estrellas",
    "sql": "SELECT * FROM productos WHERE rating > 4;"
  },
  {
    "question": "Mostrar facturas con descuentos aplicados",
    "sql": "SELECT * FROM facturas WHERE descuento > 0;"
  },
  {
    "question": "Listar pedidos internacional",
    "sql": "SELECT p.* FROM pedidos p JOIN clientes c ON p.cliente_id = c.id WHERE c.pais != 'Argentina';"
  },
  {
    "question": "Mostrar el balance general al 31 de diciembre de 2023",
    "sql": "SELECT cuenta, SUM(debe - haber) as saldo FROM asientos WHERE fecha <= '2023-12-31' GROUP BY cuenta ORDER BY cuenta;"
  },
  {
    "question": "Listar todas las cuentas por cobrar pendientes",
    "sql": "SELECT * FROM cuentas_por_cobrar WHERE estado = 'Pendiente' AND fecha_vencimiento <= CURDATE();"
  },
  {
    "question": "Obtener el total de ingresos del mes actual",
    "sql": "SELECT SUM(importe) as total_ingresos FROM asientos WHERE tipo_cuenta = 'Ingreso' AND MONTH(fecha) = MONTH(CURDATE()) AND YEAR(fecha) = YEAR(CURDATE());"
  },
  {
    "question": "Mostrar todas las facturas vencidas",
    "sql": "SELECT * FROM facturas WHERE fecha_vencimiento < CURDATE() AND estado != 'Pagada';"
  },
  {
    "question": "Calcular el total de gastos del trimestre",
    "sql": "SELECT SUM(importe) as total_gastos FROM asientos WHERE tipo_cuenta = 'Gasto' AND fecha >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH);"
  },
  {
    "question": "Listar movimientos de la cuenta caja",
    "sql": "SELECT * FROM movimientos WHERE cuenta = 'Caja' ORDER BY fecha DESC;"
  },
  {
    "question": "Obtener el saldo de cada cuenta contable",
    "sql": "SELECT codigo_cuenta, nombre_cuenta, SUM(debe - haber) as saldo FROM plan_cuentas pc LEFT JOIN asientos a ON pc.codigo = a.cuenta GROUP BY codigo_cuenta, nombre_cuenta;"
  },
  {
    "question": "Mostrar las cuentas por pagar que vencen en los próximos 30 días",
    "sql": "SELECT * FROM cuentas_por_pagar WHERE estado = 'Pendiente' AND fecha_vencimiento BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 30 DAY);"
  },
  {
    "question": "Calcular el flujo de efectivo del mes pasado",
    "sql": "SELECT SUM(CASE WHEN tipo = 'Ingreso' THEN importe ELSE -importe END) as flujo_efectivo FROM movimientos_efectivo WHERE MONTH(fecha) = MONTH(DATE_SUB(CURDATE(), INTERVAL 1 MONTH));"
  },
  {
    "question": "Listar todas las depreciaciones registradas este año",
    "sql": "SELECT * FROM depreciaciones WHERE YEAR(fecha) = YEAR(CURDATE());"
  },
  {
    "question": "Obtener el estado de resultados del último trimestre",
    "sql": "SELECT tipo_cuenta, SUM(importe) as total FROM asientos WHERE fecha >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND tipo_cuenta IN ('Ingreso', 'Gasto') GROUP BY tipo_cuenta;"
  },
  {
    "question": "Mostrar todos los cheques emitidos pendientes de cobro",
    "sql": "SELECT * FROM cheques WHERE tipo = 'Emitido' AND estado = 'Pendiente';"
  },
  {
    "question": "Contar facturas por cliente en el año actual",
    "sql": "SELECT cliente_id, COUNT(*) as total_facturas FROM facturas WHERE YEAR(fecha) = YEAR(CURDATE()) GROUP BY cliente_id;"
  },
  {
    "question": "Listar activos fijos con vida útil menor a 2 años",
    "sql": "SELECT * FROM activos_fijos WHERE vida_util < 2;"
  },
  {
    "question": "Obtener la cartera vencida por antigüedad",
    "sql": "SELECT CASE WHEN DATEDIFF(CURDATE(), fecha_vencimiento) <= 30 THEN '0-30 días' WHEN DATEDIFF(CURDATE(), fecha_vencimiento) <= 60 THEN '31-60 días' ELSE 'Más de 60 días' END as antiguedad, SUM(importe) as total FROM cuentas_por_cobrar WHERE estado = 'Vencida' GROUP BY antiguedad;"
  },
  {
    "question": "Mostrar el libro diario del mes actual",
    "sql": "SELECT * FROM asientos WHERE MONTH(fecha) = MONTH(CURDATE()) AND YEAR(fecha) = YEAR(CURDATE()) ORDER BY fecha, numero_asiento;"
  },
  {
    "question": "Calcular el total de IVA débito del mes",
    "sql": "SELECT SUM(iva_debito) as total_iva_debito FROM facturas_ventas WHERE MONTH(fecha) = MONTH(CURDATE()) AND YEAR(fecha) = YEAR(CURDATE());"
  },
  {
    "question": "Listar proveedores con saldo pendiente mayor a 10000",
    "sql": "SELECT proveedor_id, SUM(importe) as saldo_pendiente FROM cuentas_por_pagar WHERE estado = 'Pendiente' GROUP BY proveedor_id HAVING SUM(importe) > 10000;"
  },
  {
    "question": "Obtener las ventas gravadas y exentas del período",
    "sql": "SELECT tipo_operacion, SUM(importe_neto) as total FROM facturas_ventas WHERE fecha BETWEEN '2024-01-01' AND '2024-12-31' GROUP BY tipo_operacion;"
  },
  {
    "question": "Mostrar todos los ajustes contables del ejercicio",
    "sql": "SELECT * FROM asientos WHERE tipo_asiento = 'Ajuste' AND YEAR(fecha) = YEAR(CURDATE());"
  },
  {
    "question": "Contar asientos por mes en el año actual",
    "sql": "SELECT MONTH(fecha) as mes, COUNT(*) as cantidad_asientos FROM asientos WHERE YEAR(fecha) = YEAR(CURDATE()) GROUP BY MONTH(fecha);"
  },
  {
    "question": "Listar cuentas de activo con saldo deudor",
    "sql": "SELECT a.cuenta, pc.nombre_cuenta, SUM(a.debe - a.haber) as saldo FROM asientos a JOIN plan_cuentas pc ON a.cuenta = pc.codigo WHERE pc.tipo = 'Activo' GROUP BY a.cuenta, pc.nombre_cuenta HAVING SUM(a.debe - a.haber) > 0;"
  },
  {
    "question": "Obtener el total de retenciones sufridas",
    "sql": "SELECT SUM(importe_retencion) as total_retenciones FROM retenciones WHERE fecha BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE();"
  },
  {
    "question": "Mostrar facturas de compra sin registrar en contabilidad",
    "sql": "SELECT * FROM facturas_compras WHERE id NOT IN (SELECT DISTINCT factura_id FROM asientos WHERE factura_id IS NOT NULL);"
  },
  {
    "question": "Calcular el IVA crédito acumulado",
    "sql": "SELECT SUM(iva_credito) as iva_credito_total FROM facturas_compras WHERE fecha >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH);"
  },
  {
    "question": "Listar conciliaciones bancarias pendientes",
    "sql": "SELECT * FROM conciliaciones_bancarias WHERE estado = 'Pendiente';"
  },
  {
    "question": "Obtener el margen bruto por producto",
    "sql": "SELECT producto, SUM(precio_venta - costo_unitario) as margen_bruto FROM detalle_ventas WHERE fecha >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY producto;"
  },
  {
    "question": "Mostrar partidas presupuestarias con desviación mayor al 10%",
    "sql": "SELECT *, ((ejecutado - presupuestado) / presupuestado) * 100 as desviacion FROM presupuesto WHERE ABS((ejecutado - presupuestado) / presupuestado) > 0.1;"
  },
  {
    "question": "Contar cheques rechazados por banco",
    "sql": "SELECT banco, COUNT(*) as cheques_rechazados FROM cheques WHERE estado = 'Rechazado' GROUP BY banco;"
  },
  {
    "question": "Listar gastos por centro de costo",
    "sql": "SELECT centro_costo, SUM(importe) as total_gastos FROM gastos WHERE MONTH(fecha) = MONTH(CURDATE()) GROUP BY centro_costo;"
  },
  {
    "question": "Obtener el saldo de bancos al final del día",
    "sql": "SELECT cuenta_bancaria, SUM(CASE WHEN tipo = 'Ingreso' THEN importe ELSE -importe END) as saldo FROM movimientos_bancarios WHERE DATE(fecha) = CURDATE() GROUP BY cuenta_bancaria;"
  },
  {
    "question": "Mostrar asientos con diferencias en el balance",
    "sql": "SELECT numero_asiento, SUM(debe) as total_debe, SUM(haber) as total_haber FROM asientos GROUP BY numero_asiento HAVING SUM(debe) != SUM(haber);"
  },
  {
    "question": "Calcular la rotación de inventario",
    "sql": "SELECT producto, (costo_mercaderia_vendida / promedio_inventario) as rotacion FROM indicadores_inventario WHERE periodo = YEAR(CURDATE());"
  },
  {
    "question": "Listar obligaciones fiscales del mes",
    "sql": "SELECT * FROM obligaciones_fiscales WHERE MONTH(fecha_vencimiento) = MONTH(CURDATE()) AND YEAR(fecha_vencimiento) = YEAR(CURDATE());"
  },
  {
    "question": "Obtener el análisis horizontal de ingresos",
    "sql": "SELECT YEAR(fecha) as año, SUM(importe) as total_ingresos FROM asientos WHERE tipo_cuenta = 'Ingreso' GROUP BY YEAR(fecha) ORDER BY año;"
  },
  {
    "question": "Mostrar cuentas corrientes de clientes con movimientos",
    "sql": "SELECT cliente_id, SUM(debe - haber) as saldo_actual FROM cuenta_corriente_clientes GROUP BY cliente_id HAVING SUM(debe - haber) != 0;"
  },
  {
    "question": "Contar facturas anuladas por mes",
    "sql": "SELECT MONTH(fecha_anulacion) as mes, COUNT(*) as facturas_anuladas FROM facturas WHERE estado = 'Anulada' AND YEAR(fecha_anulacion) = YEAR(CURDATE()) GROUP BY MONTH(fecha_anulacion);"
  },
  {
    "question": "Listar bienes de uso depreciables",
    "sql": "SELECT * FROM activos_fijos WHERE depreciable = true AND fecha_baja IS NULL;"
  },
  {
    "question": "Obtener el costo de mercadería vendida del trimestre",
    "sql": "SELECT SUM(costo_unitario * cantidad) as costo_mercaderia_vendida FROM detalle_ventas WHERE fecha >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH);"
  },
  {
    "question": "Mostrar anticipos a proveedores sin aplicar",
    "sql": "SELECT * FROM anticipos_proveedores WHERE saldo_pendiente > 0;"
  },
  {
    "question": "Calcular el punto de equilibrio por producto",
    "sql": "SELECT producto, (costos_fijos / (precio_venta - costo_variable)) as punto_equilibrio FROM analisis_productos;"
  },
  {
    "question": "Listar notas de crédito emitidas este mes",
    "sql": "SELECT * FROM notas_credito WHERE tipo = 'Emitida' AND MONTH(fecha) = MONTH(CURDATE()) AND YEAR(fecha) = YEAR(CURDATE());"
  },
  {
    "question": "Obtener el aging de cuentas por cobrar",
    "sql": "SELECT cliente_id, SUM(CASE WHEN DATEDIFF(CURDATE(), fecha_vencimiento) <= 30 THEN importe ELSE 0 END) as corriente, SUM(CASE WHEN DATEDIFF(CURDATE(), fecha_vencimiento) BETWEEN 31 AND 60 THEN importe ELSE 0 END) as venc_31_60 FROM cuentas_por_cobrar GROUP BY cliente_id;"
  },
  {
    "question": "Mostrar el libro IVA ventas del período",
    "sql": "SELECT * FROM libro_iva_ventas WHERE fecha BETWEEN '2024-01-01' AND '2024-01-31' ORDER BY fecha, numero_factura;"
  },
  {
    "question": "Contar movimientos por tipo de comprobante",
    "sql": "SELECT tipo_comprobante, COUNT(*) as cantidad FROM movimientos_contables GROUP BY tipo_comprobante;"
  },
  {
    "question": "Listar provisiones constituidas y no utilizadas",
    "sql": "SELECT * FROM provisiones WHERE saldo > 0 AND fecha_constitucion <= DATE_SUB(CURDATE(), INTERVAL 6 MONTH);"
  },
  {
    "question": "Obtener la evolución mensual del patrimonio",
    "sql": "SELECT MONTH(fecha) as mes, SUM(CASE WHEN tipo_cuenta IN ('Activo') THEN debe - haber WHEN tipo_cuenta IN ('Pasivo', 'Patrimonio') THEN haber - debe ELSE 0 END) as patrimonio_neto FROM asientos a JOIN plan_cuentas pc ON a.cuenta = pc.codigo WHERE YEAR(fecha) = YEAR(CURDATE()) GROUP BY MONTH(fecha);"
  },
  {
    "question": "Mostrar diferencias de cambio no realizadas",
    "sql": "SELECT * FROM diferencias_cambio WHERE tipo = 'No Realizada' AND fecha >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"
  },
  {
    "question": "Calcular el EBITDA del ejercicio",
    "sql": "SELECT (ingresos - gastos_operativos) as ebitda FROM (SELECT SUM(CASE WHEN tipo_cuenta = 'Ingreso' THEN importe ELSE 0 END) as ingresos, SUM(CASE WHEN tipo_cuenta = 'Gasto' AND categoria != 'Amortizacion' AND categoria != 'Intereses' AND categoria != 'Impuestos' THEN importe ELSE 0 END) as gastos_operativos FROM asientos WHERE YEAR(fecha) = YEAR(CURDATE())) t;"
  },
  {
    "question": "Listar cuentas incobrables provisionadas",
    "sql": "SELECT * FROM provision_incobrables WHERE saldo_provision > 0;"
  },
  {
    "question": "Obtener el resumen de IVA del período fiscal",
    "sql": "SELECT SUM(iva_debito) as iva_debito, SUM(iva_credito) as iva_credito, (SUM(iva_debito) - SUM(iva_credito)) as saldo_iva FROM liquidacion_iva WHERE periodo = '2024-01';"
  },
  {
    "question": "Mostrar anticipos de clientes sin facturar",
    "sql": "SELECT * FROM anticipos_clientes WHERE estado = 'Pendiente' AND saldo > 0;"
  },
  {
    "question": "Contar rectificativas por tipo de error",
    "sql": "SELECT motivo_rectificacion, COUNT(*) as cantidad FROM asientos_rectificativos GROUP BY motivo_rectificacion;"
  },
  {
    "question": "Listar gastos de representación del trimestre",
    "sql": "SELECT * FROM gastos WHERE categoria = 'Representacion' AND fecha >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH);"
  },
  {
    "question": "Obtener el análisis vertical del balance",
    "sql": "SELECT cuenta, nombre_cuenta, saldo, (saldo / total_activo * 100) as porcentaje FROM (SELECT cuenta, pc.nombre_cuenta, SUM(debe - haber) as saldo FROM asientos a JOIN plan_cuentas pc ON a.cuenta = pc.codigo WHERE pc.tipo = 'Activo' GROUP BY cuenta, pc.nombre_cuenta) balances CROSS JOIN (SELECT SUM(debe - haber) as total_activo FROM asientos a JOIN plan_cuentas pc ON a.cuenta = pc.codigo WHERE pc.tipo = 'Activo') totales;"
  },
  {
    "question": "Mostrar movimientos bancarios no conciliados",
    "sql": "SELECT * FROM extractos_bancarios WHERE conciliado = false ORDER BY fecha;"
  },
  {
    "question": "Calcular la liquidez corriente",
    "sql": "SELECT (activo_corriente / pasivo_corriente) as liquidez_corriente FROM (SELECT SUM(CASE WHEN tipo = 'Activo' AND corriente = true THEN saldo ELSE 0 END) as activo_corriente, SUM(CASE WHEN tipo = 'Pasivo' AND corriente = true THEN saldo ELSE 0 END) as pasivo_corriente FROM balances_cuentas WHERE fecha = CURDATE()) ratios;"
  },
  {
    "question": "Listar facturas con descuentos por pronto pago",
    "sql": "SELECT * FROM facturas_ventas WHERE descuento_pronto_pago > 0;"
  },
  {
    "question": "Obtener el total de honorarios profesionales pagados",
    "sql": "SELECT SUM(importe_neto) as total_honorarios FROM facturas_compras WHERE categoria = 'Honorarios Profesionales' AND YEAR(fecha) = YEAR(CURDATE());"
  },
  {
    "question": "Mostrar el detalle de gastos de personal por mes",
    "sql": "SELECT MONTH(fecha) as mes, SUM(sueldos) as sueldos, SUM(cargas_sociales) as cargas_sociales, SUM(otros_gastos) as otros FROM gastos_personal WHERE YEAR(fecha) = YEAR(CURDATE()) GROUP BY MONTH(fecha);"
  },
  {
    "question": "Contar comprobantes por numeración faltante",
    "sql": "SELECT tipo_comprobante, COUNT(*) as emitidos FROM comprobantes WHERE YEAR(fecha) = YEAR(CURDATE()) GROUP BY tipo_comprobante;"
  },
  {
    "question": "Listar inversiones temporarias con vencimiento próximo",
    "sql": "SELECT * FROM inversiones WHERE fecha_vencimiento BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 90 DAY);"
  },
  {
    "question": "Obtener el cálculo de previsión para incobrables",
    "sql": "SELECT SUM(importe * porcentaje_prevision / 100) as prevision_incobrables FROM cuentas_por_cobrar WHERE estado = 'Pendiente' AND DATEDIFF(CURDATE(), fecha_vencimiento) > 90;"
  }
]