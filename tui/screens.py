# tui/screens.py

import subprocess
import os
import urllib.request
from urllib.error import URLError, HTTPError
from typing import Optional, Dict, List

from textual.app import ComposeResult
from textual.containers import Container, Horizontal, Vertical, VerticalScroll
from textual.widgets import Header, Footer, Button, Static, Input, Label, Select, Log
from textual.binding import Binding
from textual.screen import Screen, ModalScreen
from textual import work

# Importamos desde nuestros m√≥dulos
from .constants import (
    PROJECT_ROOT, BACKEND_DIR, FRONTEND_DIR,
    IS_WINDOWS, get_os_name,
    LLM_DOWNLOAD_URL, LLM_FILE_NAME, LLM_DEST_DIR, LLM_DEST_PATH
)
from .logic import ProjectConfig, DependencyChecker


# --- PANTALLA DE CHEQUEO DE DEPENDENCIAS ---
class DependencyCheckScreen(Screen):
    """
    Pantalla de verificaci√≥n de dependencias.
    Bloquea si una dependencia falta.
    Advierte si la versi√≥n es incorrecta pero permite continuar.
    """
    BINDINGS = [
        Binding("q", "quit", "Quit"),
        Binding("c", "continue_setup", "Continue"),
    ]
    
    def __init__(self):
        """Inicializa la pantalla de chequeo."""
        super().__init__()
        self.checks_done = False
        self.all_found = False # Flag para saber si se encontraron (aunque la versi√≥n sea err√≥nea)

    def compose(self) -> ComposeResult:
        """Dibuja la interfaz de la pantalla."""
        yield Header()
        yield Container(
            Static("üîç Verificando Dependencias del Sistema", classes="title"),
            Static("... chequeando Python ...", id="python-check", classes="check-item"),
            Static("... chequeando NodeJS ...", id="nodejs-check", classes="check-item"),
            Static("... chequeando TeXLive ...", id="texlive-check", classes="check-item"),
            Static("", id="status-msg", classes="status"),
            Horizontal(
                Button("Continuar", variant="primary", id="continue-btn", disabled=True),
                Button("Salir", variant="default", id="quit-btn"),
                classes="button-row"
            ),
            id="dep-container"
        )
        yield Footer()
    
    def on_mount(self):
        """Al montar la pantalla, inicia el chequeo en un worker."""
        self.check_dependencies()
    
    @work(exclusive=True)
    async def check_dependencies(self):
        """
        Ejecuta los chequeos y actualiza la UI.
        Distingue entre 'no encontrado' (error) y 'versi√≥n incorrecta' (warning).
        """
        py_ok, py_ver, py_req = DependencyChecker.check_python()
        self.update_check("python-check", "Python", py_ok, py_ver, py_req)
        
        node_ok, node_ver, node_req = DependencyChecker.check_nodejs()
        self.update_check("nodejs-check", "NodeJS", node_ok, node_ver, node_req)
        
        tex_ok, tex_ver, tex_req = DependencyChecker.check_texlive()
        self.update_check("texlive-check", "TeXLive", tex_ok, tex_ver, tex_req)
        
        # Verificar si todas las dependencias est√°n *instaladas*
        deps_status = [
            ("Python", py_ver != "Not found"),
            ("NodeJS", node_ver != "Not found"),
            ("TeXLive", tex_ver != "Not found"),
        ]
        self.all_found = all(found for _, found in deps_status)
        
        # Verificar si todas las versiones son *correctas*
        all_correct_version = py_ok and node_ok and tex_ok
        
        status = self.query_one("#status-msg", Static)
        continue_btn = self.query_one("#continue-btn", Button)
        
        if not self.all_found:
            missing = [name for name, found in deps_status if not found]
            status.update(f"‚ùå Error: Faltan dependencias: {', '.join(missing)}. \nDebes instalarlas para continuar.")
            continue_btn.disabled = True # Bloquear
        
        elif not all_correct_version:
            status.update("‚ö†Ô∏è  Advertencia: Algunas dependencias tienen versiones diferentes. \nPuedes continuar, pero el proyecto podr√≠a no funcionar.")
            continue_btn.disabled = False # Permitir
            
        else:
            status.update("‚úÖ Todas las dependencias est√°n correctas.")
            continue_btn.disabled = False # Permitir

        self.checks_done = True
    
    def update_check(self, widget_id: str, name: str, is_ok: bool, current: str, required: str):
        """Actualiza un widget de chequeo con el icono correcto (‚ùå, ‚ö†Ô∏è, ‚úÖ)."""
        widget = self.query_one(f"#{widget_id}", Static)
        
        if current == "Not found":
            icon = "‚ùå" # Error (Faltante)
            msg = f"{icon} {name}: {current} (requerido: {required})"
        elif is_ok:
            icon = "‚úÖ" # √âxito
            msg = f"{icon} {name}: {current}"
        else:
            icon = "‚ö†Ô∏è" # Advertencia (Versi√≥n incorrecta)
            msg = f"{icon} {name}: {current} (requerido: {required})"
            
        widget.update(msg)
    
    def on_button_pressed(self, event: Button.Pressed):
        """Maneja los clics de los botones."""
        if event.button.id == "continue-btn":
            if self.checks_done and self.all_found:
                self.app.push_screen(SetupScreen())
        elif event.button.id == "quit-btn":
            self.app.exit()
    
    def action_continue_setup(self):
        """Binding 'c' para continuar (si es permitido)."""
        if self.checks_done and self.all_found:
            self.app.push_screen(SetupScreen())
    
    def action_quit(self):
        """Binding 'q' para salir."""
        self.app.exit()


# --- PANTALLA DE SETUP (CON DESCARGA LLM) ---
class SetupScreen(Screen):
    """
    Pantalla de instalaci√≥n inicial (venv, pip, npm, LLM).
    """
    BINDINGS = [Binding("q", "quit", "Quit")]
    
    def compose(self) -> ComposeResult:
        """A√±ade un widget para el progreso de descarga."""
        yield Header()
        yield Container(
            Static("‚öôÔ∏è  Instalaci√≥n del Proyecto Mosaite", classes="title"),
            Log(id="setup-log", auto_scroll=True),
            # Widget para la barra de progreso de descarga
            Static("", id="download-progress", classes="progress-bar"), 
            Static("", id="setup-status"),
            Horizontal(
                Button("Iniciar Instalaci√≥n", variant="primary", id="start-btn"),
                Button("Saltar", variant="default", id="skip-btn"),
                classes="button-row"
            ),
            id="setup-container"
        )
        yield Footer()
    
    def on_button_pressed(self, event: Button.Pressed):
        if event.button.id == "start-btn":
            event.button.disabled = True
            self.query_one("#skip-btn", Button).disabled = True
            self.run_setup()
        elif event.button.id == "skip-btn":
            self.app.push_screen(EnvironmentConfigScreen())
    
    @work(exclusive=True)
    async def run_setup(self):
        """Ejecuta todos los pasos de instalaci√≥n en orden."""
        log = self.query_one("#setup-log", Log)
        status = self.query_one("#setup-status", Static)
        progress_widget = self.query_one("#download-progress", Static)
        
        python_cmd = "python" if IS_WINDOWS else "python3"
        pip_cmd = str(PROJECT_ROOT / "venv" / ("Scripts" if IS_WINDOWS else "bin") / "pip")
        
        log.write_line(f"üñ•Ô∏è  Sistema operativo detectado: {get_os_name()}")
        log.write_line(f"üìÅ Directorio del proyecto: {PROJECT_ROOT}")
        
        # --- 1. Crear Venv ---
        log.write_line("\nüì¶ Creando entorno virtual de Python...")
        result = await self.run_command([python_cmd, "-m", "venv", "venv"])
        if result: log.write_line("‚úÖ Entorno virtual creado")
        else:
            log.write_line("‚ùå Error creando entorno virtual")
            status.update("‚ùå Setup fallido")
            return
        
        # --- 2. Instalar Pip ---
        requirements_file = BACKEND_DIR / "requirements.txt"
        if requirements_file.exists():
            log.write_line("\nüì• Instalando dependencias de Python (backend)...")
            result = await self.run_command([pip_cmd, "install", "-r", str(requirements_file)])
            if result: log.write_line("‚úÖ Dependencias de Python instaladas")
            else: log.write_line("‚ö†Ô∏è  Advertencia: Error instalando dependencias de Python")
        
        # --- 3. Instalar NPM ---
        if FRONTEND_DIR.exists() and (FRONTEND_DIR / "package.json").exists():
            log.write_line("\nüì• Instalando dependencias de NodeJS (frontend)...")
            result = await self.run_command(["npm", "install"], cwd=str(FRONTEND_DIR))
            if result: log.write_line("‚úÖ Dependencias de NodeJS instaladas")
            else: log.write_line("‚ö†Ô∏è  Advertencia: Error instalando dependencias de NodeJS")

        # --- 4. Descargar Modelo LLM ---
        log.write_line(f"\nüß† Descargando modelo LLM ({LLM_FILE_NAME})...")
        log.write_line("   (Esto puede tardar varios minutos dependiendo de tu conexi√≥n)")
        
        try:
            LLM_DEST_DIR.mkdir(parents=True, exist_ok=True)
            log.write_line(f"   Destino: {LLM_DEST_DIR}")
        except Exception as e:
            log.write_line(f"‚ùå Error creando directorio de destino: {e}")
            status.update("‚ùå Setup fallido (Error de directorio LLM)")
            return

        download_ok = await self.download_model_with_progress(log, progress_widget)
        
        if download_ok:
            log.write_line(f"‚úÖ Modelo LLM descargado exitosamente.")
            progress_widget.update("‚úÖ Descarga completada")
        else:
            log.write_line(f"‚ö†Ô∏è  Advertencia: Error al descargar el modelo LLM. El consultor IA no funcionar√°.")
            progress_widget.update("‚ùå Error de descarga")
        
        # --- 5. Finalizar ---
        status.update("‚úÖ Instalaci√≥n completada")
        log.write_line("\nüéâ ¬°Setup completado! Continuando a configuraci√≥n de entornos...")
        
        self.set_timer(2, lambda: self.app.push_screen(EnvironmentConfigScreen()))
    
    async def run_command(self, cmd: List[str], cwd: Optional[str] = None) -> bool:
        """Helper para ejecutar comandos de shell."""
        try:
            process = await self.run_worker(
                subprocess.run,
                cmd,
                capture_output=True,
                text=True,
                cwd=cwd or str(PROJECT_ROOT)
            )
            return process.returncode == 0
        except Exception as e:
            return False

    @work(thread=True)
    async def download_model_with_progress(self, log: Log, progress_widget: Static) -> bool:
        """
        Descarga el archivo LLM usando urllib y reporta el progreso.
        Se ejecuta en un hilo de worker para no bloquear la UI.
        """
        
        # Funci√≥n de callback para reportar el progreso
        def reporthook(block_num, block_size, total_size):
            downloaded = block_num * block_size
            if total_size > 0:
                percent = downloaded * 100 / total_size
                # Barra de progreso (50 caracteres de ancho)
                progress_blocks = int(percent / 2) 
                bar = "‚ñà" * progress_blocks + " " * (50 - progress_blocks)
                # MB descargados
                downloaded_mb = downloaded / (1024 * 1024)
                total_mb = total_size / (1024 * 1024)
                
                # Actualiza la UI de forma segura desde el hilo
                self.app.call_from_thread(
                    progress_widget.update, 
                    f"[{bar}] {percent:.1f}% ({downloaded_mb:.1f} / {total_mb:.1f} MB)"
                )

        try:
            # Comprobar si el archivo ya existe para saltar la descarga
            if LLM_DEST_PATH.exists():
                self.app.call_from_thread(log.write_line, "   ... el modelo ya existe. Saltando descarga.")
                return True
                
            # Iniciar la descarga
            urllib.request.urlretrieve(
                LLM_DOWNLOAD_URL, 
                LLM_DEST_PATH, 
                reporthook
            )
            return True
        except HTTPError as e:
            self.app.call_from_thread(log.write_line, f"   Error HTTP: {e.code} {e.reason} (URL: {LLM_DOWNLOAD_URL})")
            return False
        except URLError as e:
            self.app.call_from_thread(log.write_line, f"   Error de URL (¬øSin conexi√≥n?): {e.reason}")
            return False
        except Exception as e:
            # Captura cualquier otro error (ej. permisos de escritura)
            self.app.call_from_thread(log.write_line, f"   Error inesperado en descarga: {e}")
            return False
    
    def action_quit(self):
        self.app.exit()


# --- MODALES DE GESTI√ìN DE ENTORNOS ---
class ConfirmDeleteModal(ModalScreen):
    """Modal para confirmar la eliminaci√≥n de un entorno."""
    
    def __init__(self, name_to_delete: str):
        super().__init__()
        self.name_to_delete = name_to_delete
        self.name = f"Modal para borrar {name_to_delete}"

    def compose(self) -> ComposeResult:
        with Vertical(classes="modal-container"):
            yield Static(f"¬øEliminar el entorno '{self.name_to_delete}'?", classes="title-warning")
            yield Static("Esto no borrar√° los archivos de la carpeta, solo la configuraci√≥n del proyecto.")
            yield Horizontal(
                Button("Borrar", variant="error", id="delete-btn"),
                Button("Cancelar", variant="default", id="cancel-btn"),
                classes="button-row"
            )
    
    def on_button_pressed(self, event: Button.Pressed):
        """Devuelve True si se confirma el borrado, False si se cancela."""
        if event.button.id == "delete-btn":
            self.dismiss(True)
        elif event.button.id == "cancel-btn":
            self.dismiss(False)

class RenameEnvironmentModal(ModalScreen):
    """Modal para renombrar un entorno."""
    
    def __init__(self, old_name: str):
        super().__init__()
        self.old_name = old_name
        self.name = f"Modal para renombrar {old_name}"
    
    def compose(self) -> ComposeResult:
        with Vertical(classes="modal-container"):
            yield Static(f"Renombrar entorno: '{self.old_name}'", classes="title")
            yield Label("Nuevo nombre:")
            yield Input(value=self.old_name, id="new-name-input")
            yield Horizontal(
                Button("Renombrar", variant="primary", id="rename-btn"),
                Button("Cancelar", variant="default", id="cancel-btn"),
                classes="button-row"
            )
    
    def on_mount(self):
        """Pone el foco en el Input al abrir."""
        self.query_one(Input).focus()

    def on_button_pressed(self, event: Button.Pressed):
        """Devuelve el nuevo nombre si se confirma, o None si se cancela."""
        if event.button.id == "rename-btn":
            new_name = self.query_one(Input).value.strip()
            if new_name:
                self.dismiss(new_name)
            else:
                self.notify("El nombre no puede estar vac√≠o", severity="error")
        elif event.button.id == "cancel-btn":
            self.dismiss(None)


# --- PANTALLA DE GESTI√ìN DE ENTORNOS ---
class EnvironmentConfigScreen(Screen):
    """
    Pantalla de configuraci√≥n de entornos (Crear, Renombrar, Borrar).
    """
    BINDINGS = [Binding("escape", "back", "Volver al Men√∫")]
    
    def __init__(self):
        super().__init__()
        self.config = ProjectConfig()
    
    def compose(self) -> ComposeResult:
        """Dibuja la pantalla con secciones separadas para Crear y Gestionar."""
        yield Header()
        yield VerticalScroll(
            Static("üóÇÔ∏è  Gesti√≥n de Entornos de Datos", classes="title"),
            
            # --- Secci√≥n de Creaci√≥n ---
            Static("Crear Nuevo Entorno", classes="subtitle"),
            Label("Nombre del entorno:"),
            Input(placeholder="produccion, desarrollo, testing...", id="env-name"),
            Label("Ruta de datos:"),
            Input(placeholder="/ruta/absoluta/a/carpeta/datos", id="data-path"),
            Horizontal(
                Button("Crear Entorno", variant="primary", id="create-env-btn"),
                classes="button-row"
            ),

            # --- Secci√≥n de Gesti√≥n ---
            Static("\nüìã Gestionar Entornos Existentes:", classes="subtitle"),
            Select(
                options=[("", "")], # Se llenar√° en on_mount
                id="env-select-list", 
                allow_blank=True, 
                prompt="Selecciona un entorno para gestionar..."
            ),
            Horizontal(
                Button("Renombrar Seleccionado", variant="warning", id="rename-env-btn"),
                Button("Borrar Seleccionado", variant="error", id="delete-env-btn"),
                classes="button-row-spaced"
            ),

            # --- Bot√≥n de Continuar (ahora es "Volver") ---
            Horizontal(
                Button("Volver al Men√∫", variant="success", id="continue-btn"),
                classes="button-row"
            ),
            id="env-container"
        )
        yield Footer()
    
    def on_mount(self):
        """Al montar, actualiza la lista del Select."""
        self.refresh_env_list()
    
    def refresh_env_list(self):
        """Actualiza el widget Select con la lista de entornos."""
        env_select = self.query_one("#env-select-list", Select)
        current_value = env_select.value
        env_options = []
        
        if not self.config.config["environments"]:
            env_options.append(("No hay entornos configurados", None))
            env_select.disabled = True
            self.query_one("#rename-env-btn").disabled = True
            self.query_one("#delete-env-btn").disabled = True
        else:
            env_options = [(name, name) for name in self.config.config["environments"].keys()]
            env_select.disabled = False
            self.query_one("#rename-env-btn").disabled = False
            self.query_one("#delete-env-btn").disabled = False
        
        env_select.set_options(env_options)
        
        if current_value in self.config.config["environments"]:
            env_select.value = current_value
        else:
            env_select.value = None

    def on_button_pressed(self, event: Button.Pressed):
        """Maneja los nuevos botones de Crear, Renombrar, Borrar y Volver."""
        if event.button.id == "create-env-btn":
            self.create_environment()
        elif event.button.id == "continue-btn":
            self.app.pop_screen()
        elif event.button.id == "rename-env-btn":
            self.on_rename_pressed()
        elif event.button.id == "delete-env-btn":
            self.on_delete_pressed()
    
    def create_environment(self):
        """Crea un nuevo entorno y actualiza la lista."""
        name_input = self.query_one("#env-name", Input)
        path_input = self.query_one("#data-path", Input)
        name = name_input.value.strip()
        data_path = path_input.value.strip()
        
        if not name or not data_path:
            self.notify("Completa todos los campos", severity="error")
            return
            
        if name in self.config.config["environments"]:
            self.notify(f"Error: El entorno '{name}' ya existe", severity="error")
            return
        
        # Expande la ruta del usuario (ej. ~/)
        data_dir = os.path.expanduser(data_path)
        try:
            # Asegurarse de que las carpetas base existen
            os.makedirs(data_dir, exist_ok=True)
            os.makedirs(os.path.join(data_dir, "pdfs"), exist_ok=True)
            
            self.config.add_environment(name, data_dir)
            self.notify(f"‚úÖ Entorno '{name}' creado", severity="information")
            
            name_input.value = ""
            path_input.value = ""
            self.refresh_env_list()
        except Exception as e:
            self.notify(f"Error al crear directorios: {str(e)}", severity="error")
            
    def on_rename_pressed(self):
        """Llama al modal de renombrar para el entorno seleccionado."""
        selected_env = self.query_one("#env-select-list", Select).value
        if not selected_env:
            self.notify("Selecciona un entorno para renombrar", severity="warning")
            return
        
        def handle_rename(new_name: Optional[str]):
            if new_name:
                if self.config.rename_environment(str(selected_env), new_name):
                    self.notify(f"‚úÖ Entorno renombrado a '{new_name}'")
                    self.refresh_env_list()
                    self.query_one("#env-select-list", Select).value = new_name
                else:
                    self.notify(f"‚ùå Error: El nombre '{new_name}' ya existe o hubo un error", severity="error")
        
        self.app.push_screen(RenameEnvironmentModal(str(selected_env)), handle_rename)

    def on_delete_pressed(self):
        """Llama al modal de confirmaci√≥n de borrado."""
        selected_env = self.query_one("#env-select-list", Select).value
        if not selected_env:
            self.notify("Selecciona un entorno para borrar", severity="warning")
            return
            
        def handle_delete(confirmed: bool):
            if confirmed:
                if self.config.delete_environment(str(selected_env)):
                    self.notify(f"‚úÖ Entorno '{selected_env}' eliminado")
                    self.refresh_env_list()
                else:
                    self.notify(f"‚ùå Error al eliminar el entorno", severity="error")
        
        self.app.push_screen(ConfirmDeleteModal(str(selected_env)), handle_delete)

    def action_back(self):
        """Binding 'escape' para volver al men√∫."""
        self.app.pop_screen()


# --- MODALES DE DJANGO ---
class CreateSuperUserModal(ModalScreen):
    """
    Modal para crear un superusuario de Django de forma no interactiva.
    """
    def __init__(self, config: ProjectConfig):
        super().__init__()
        self.config = config

    def compose(self) -> ComposeResult:
        with Vertical(classes="modal-container"):
            yield Static("üë§ Crear Superusuario", classes="title")
            yield Label("Nombre de usuario:")
            yield Input(id="username")
            yield Label("Email (opcional):")
            yield Input(id="email")
            yield Label("Contrase√±a:")
            yield Input(password=True, id="password")
            yield Horizontal(
                Button("Crear", variant="primary", id="create-btn"),
                Button("Cancelar", variant="default", id="cancel-btn"),
                classes="button-row"
            )

    def on_button_pressed(self, event: Button.Pressed):
        if event.button.id == "create-btn":
            self.run_create_superuser()
        elif event.button.id == "cancel-btn":
            self.app.pop_screen()

    @work(exclusive=True)
    async def run_create_superuser(self):
        """Ejecuta 'createsuperuser' en un worker."""
        username = self.query_one("#username", Input).value
        email = self.query_one("#email", Input).value
        password = self.query_one("#password", Input).value
        
        if not username or not password:
            self.notify("Usuario y contrase√±a son requeridos", severity="error")
            return

        python_path = str(PROJECT_ROOT / "venv" / ("Scripts" if IS_WINDOWS else "bin") / "python")
        manage_py = str(BACKEND_DIR / "manage.py")
        
        cmd_env = os.environ.copy()
        cmd_env["DJANGO_SUPERUSER_PASSWORD"] = password
        
        current_env = self.config.get_current_env()
        if current_env:
            cmd_env["DATABASE_PATH"] = current_env["db_path"]
        
        cmd = [python_path, manage_py, "createsuperuser", "--noinput", "--username", username]
        if email:
            cmd.extend(["--email", email])

        try:
            process = await self.run_worker(
                subprocess.run,
                cmd,
                env=cmd_env,
                capture_output=True,
                text=True,
                cwd=str(BACKEND_DIR)
            )
            
            if process.returncode == 0:
                self.notify("‚úÖ Superusuario creado exitosamente", severity="information")
                self.app.pop_screen()
            else:
                if "Error: That username is already taken" in process.stdout:
                    self.notify("‚ùå Error: Ese nombre de usuario ya existe", severity="error")
                else:
                    self.notify(f"‚ùå Error creando superusuario", severity="error")
                    
        except Exception as e:
            self.notify(f"‚ùå Error inesperado: {str(e)}", severity="error")


class ConfigEnvironmentModal(ModalScreen):
    """
    Modal para pedir los datos de la tabla 'config' (compa√±√≠a, moneda, etc.)
    """
    def __init__(self, config: ProjectConfig):
        super().__init__()
        self.config = config

    def compose(self) -> ComposeResult:
        """Dibuja el formulario modal."""
        with Vertical(classes="modal-container-large"): # Usa CSS para un modal m√°s grande
            yield Static("‚öôÔ∏è Configuraci√≥n Inicial del Entorno", classes="title")
            yield Static("Estos datos se guardar√°n en la nueva base de datos.")
            
            yield Label("\nNombre de la Compa√±√≠a/Organizaci√≥n:")
            yield Input(placeholder="Mi Empresa S.A.", id="company_name")
            
            yield Label("Moneda (s√≠mbolo):")
            yield Input(placeholder="$", id="currency", value="$")
            
            yield Label("Formato de Fecha:")
            yield Select(
                options=[("DD/MM/AAAA", "DD/MM/AAAA"), ("MM/DD/AAAA", "MM/DD/AAAA"), ("AAAA-MM-DD", "AAAA-MM-DD")],
                value="DD/MM/AAAA",
                id="date_format",
                allow_blank=False
            )
            
            yield Label("Modo del Sistema:")
            yield Select(
                options=[("Online (Recomendado)", "online"), ("Offline", "offline")],
                value="online",
                id="system_mode",
                allow_blank=False
            )
            
            yield Horizontal(
                Button("Guardar Configuraci√≥n", variant="primary", id="save-btn"),
                Button("Cancelar", variant="default", id="cancel-btn"),
                classes="button-row"
            )

    def on_mount(self):
        """Pone el foco en el primer input."""
        self.query_one("#company_name", Input).focus()

    def on_button_pressed(self, event: Button.Pressed):
        """Maneja los botones del modal."""
        if event.button.id == "save-btn":
            data = {
                "company": self.query_one("#company_name", Input).value,
                "currency": self.query_one("#currency", Input).value,
                "date_format": str(self.query_one("#date_format", Select).value),
                "system_mode": str(self.query_one("#system_mode", Select).value),
            }
            
            if not data["company"] or not data["currency"]:
                self.notify("Compa√±√≠a y Moneda son requeridos", severity="error")
                return

            self.dismiss(data) # Devuelve los datos al cerrarse
            
        elif event.button.id == "cancel-btn":
            self.dismiss(None)


# --- PANTALLA DE SETUP DE DJANGO ---
class DjangoSetupScreen(Screen):
    """
    Pantalla de configuraci√≥n de Django (Migrate, Init, Superuser).
    """
    BINDINGS = [Binding("q", "quit", "Quit")]
    
    def __init__(self, config: ProjectConfig):
        super().__init__()
        self.config = config
    
    def compose(self) -> ComposeResult:
        """Dibuja la pantalla de setup de Django."""
        yield Header()
        yield Container(
            Static("üêç Configuraci√≥n de Django", classes="title"),
            Static("Sigue los pasos en orden para inicializar el entorno."),
            Log(id="django-log", auto_scroll=True),
            Static("", id="django-status"),
            Horizontal(
                Button("1. Ejecutar Migraciones", variant="primary", id="migrate-btn"),
                Button("2. Inicializar Configuraci√≥n", variant="primary", id="init-config-btn"),
                Button("3. Crear Superusuario", variant="warning", id="superuser-btn"),
                Button("Finalizar Setup", variant="success", id="finish-btn"),
                classes="button-row-spaced"
            ),
            id="django-container"
        )
        yield Footer()
    
    def on_button_pressed(self, event: Button.Pressed):
        """Maneja los botones (migrar, init, superusuario, finalizar)."""
        if event.button.id == "migrate-btn":
            self.run_migrations()
        
        elif event.button.id == "init-config-btn":
            # Abre el modal, y le pasa un 'callback' (la funci√≥n run_init_config)
            self.app.push_screen(
                ConfigEnvironmentModal(self.config), 
                self.run_init_config # Esto se ejecutar√° si el modal devuelve datos
            )
            
        elif event.button.id == "superuser-btn":
            self.app.push_screen(CreateSuperUserModal(self.config))
            
        elif event.button.id == "finish-btn":
            self.config.mark_setup_completed()
            self.notify("‚úÖ Setup completado correctamente", severity="information")
            self.app.exit(result="RESTART") # Reinicia la app al men√∫
    
    @work(exclusive=True)
    async def run_migrations(self):
        """Ejecuta el comando 'migrate' de Django."""
        log = self.query_one("#django-log", Log)
        log.write_line("\nüîÑ [Paso 1] Ejecutando migraciones de Django...")
        
        env = self.config.get_current_env()
        if env: os.environ["DATABASE_PATH"] = env["db_path"]
        else:
            log.write_line("‚ùå Error: No hay entorno activo seleccionado.")
            return

        python_path = str(PROJECT_ROOT / "venv" / ("Scripts" if IS_WINDOWS else "bin") / "python")
        manage_py = str(BACKEND_DIR / "manage.py")
        
        try:
            result = await self.run_worker(
                subprocess.run,
                [python_path, manage_py, "migrate"],
                capture_output=True, text=True, cwd=str(BACKEND_DIR)
            )
            if result.returncode == 0:
                log.write_line("‚úÖ Migraciones completadas exitosamente.")
                log.write_line(result.stdout)
            else:
                log.write_line("‚ùå Error en migraciones:")
                log.write_line(result.stderr or result.stdout)
        except Exception as e:
            log.write_line(f"‚ùå Error cr√≠tico ejecutando migraciones: {str(e)}")

    @work(exclusive=True)
    async def run_init_config(self, data: Optional[Dict]):
        """
        Ejecuta el comando 'init_config' con los datos del modal.
        """
        if data is None:
            self.notify("Configuraci√≥n cancelada", severity="warning")
            return
            
        log = self.query_one("#django-log", Log)
        log.write_line("\nüîÑ [Paso 2] Ejecutando inicializaci√≥n de configuraci√≥n...")

        env = self.config.get_current_env()
        if env: os.environ["DATABASE_PATH"] = env["db_path"]
        else:
            log.write_line("‚ùå Error: No hay entorno activo seleccionado.")
            return

        python_path = str(PROJECT_ROOT / "venv" / ("Scripts" if IS_WINDOWS else "bin") / "python")
        manage_py = str(BACKEND_DIR / "manage.py")
        
        cmd = [
            python_path, manage_py, "init_config",
            "--company", data["company"],
            "--currency", data["currency"],
            "--date-format", data["date_format"],
            "--system-mode", data["system_mode"],
        ]

        try:
            result = await self.run_worker(
                subprocess.run,
                cmd,
                capture_output=True, text=True, cwd=str(BACKEND_DIR)
            )
            
            log.write_line(result.stdout)
            if result.returncode == 0:
                log.write_line("‚úÖ Configuraci√≥n inicial guardada.")
                self.notify("‚úÖ Configuraci√≥n guardada", severity="information")
            else:
                log.write_line("‚ùå Error guardando la configuraci√≥n:")
                log.write_line(result.stderr or result.stdout)
        except Exception as e:
            log.write_line(f"‚ùå Error cr√≠tico ejecutando init_config: {str(e)}")
    
    def action_quit(self):
        self.app.exit()


# --- PANTALLA DE MEN√ö PRINCIPAL ---
class MainMenuScreen(Screen):
    """
    Men√∫ principal de la aplicaci√≥n.
    """
    BINDINGS = [Binding("q", "quit", "Quit")]
    
    def __init__(self, config: ProjectConfig):
        super().__init__()
        self.config = config
    
    def compose(self) -> ComposeResult:
        current_env = self.config.config.get('current_env', 'Ninguno')
        yield Header()
        yield Container(
            Static("üöÄ Mosaite Project Manager", classes="title"),
            Static(f"Entorno actual: {current_env}", id="current-env", classes="env-display"),
            Vertical(
                Button("‚ñ∂Ô∏è  Iniciar Proyecto", variant="primary", id="start-project-btn"),
                Button("üîÑ Cambiar Entorno", variant="default", id="change-env-btn"),
                Button("üóÇÔ∏è  Gestionar Entornos", variant="default", id="manage-env-btn"),
                Button("üêç Configuraci√≥n Django", variant="default", id="django-config-btn"),
                Button("‚ùå Salir", variant="error", id="quit-btn"),
                classes="menu-buttons"
            ),
            id="main-menu-container"
        )
        yield Footer()
    
    def on_button_pressed(self, event: Button.Pressed):
        if event.button.id == "start-project-btn":
            if not self.config.get_current_env():
                self.notify("Debes configurar un entorno primero", severity="warning")
                return
            self.app.push_screen(RunProjectScreen(self.config))
        elif event.button.id == "change-env-btn":
            self.app.push_screen(SelectEnvironmentScreen(self.config))
        elif event.button.id == "manage-env-btn":
            self.app.push_screen(EnvironmentConfigScreen())
        elif event.button.id == "django-config-btn":
            self.app.push_screen(DjangoSetupScreen(self.config))
        elif event.button.id == "quit-btn":
            self.app.exit()
    
    def action_quit(self):
        self.app.exit()


# --- PANTALLA DE SELECCI√ìN DE ENTORNO ---
class SelectEnvironmentScreen(Screen):
    """Pantalla para seleccionar el entorno activo"""
    
    BINDINGS = [Binding("escape", "back", "Back")]
    
    def __init__(self, config: ProjectConfig):
        super().__init__()
        self.config = config
    
    def compose(self) -> ComposeResult:
        yield Header()
        env_options = [(name, name) for name in self.config.config["environments"].keys()]
        current = self.config.config.get("current_env")
        yield Container(
            Static("üîÑ Seleccionar Entorno Activo", classes="title"),
            Select(
                options=env_options,
                value=current,
                id="env-select",
                allow_blank=False
            ),
            Horizontal(
                Button("Cambiar", variant="primary", id="change-btn"),
                Button("Cancelar", variant="default", id="cancel-btn"),
                classes="button-row"
            ),
            id="select-env-container"
        )
        yield Footer()
    
    def on_button_pressed(self, event: Button.Pressed):
        if event.button.id == "change-btn":
            select = self.query_one("#env-select", Select)
            if select.value:
                self.config.set_current_env(str(select.value))
                self.notify(f"‚úÖ Entorno cambiado a: {select.value}", severity="information")
                self.app.pop_screen()
        elif event.button.id == "cancel-btn":
            self.app.pop_screen()
    
    def action_back(self):
        self.app.pop_screen()


# --- PANTALLA DE EJECUCI√ìN DEL PROYECTO ---
class RunProjectScreen(Screen):
    """Pantalla para ejecutar los servidores de Backend y Frontend"""
    
    BINDINGS = [
        Binding("escape", "back", "Back"),
        Binding("s", "stop_servers", "Stop Servers"),
        Binding("ctrl+c", "stop_servers", "Stop Servers", show=False)
    ]
    
    def __init__(self, config: ProjectConfig):
        super().__init__()
        self.config = config
        self.backend_process = None
        self.frontend_process = None
        self.is_running = False
    
    def compose(self) -> ComposeResult:
        yield Header()
        yield VerticalScroll(
            Static("‚ñ∂Ô∏è  Ejecutando Proyecto Mosaite", classes="title"),
            Static(f"Entorno: {self.config.config.get('current_env')}", id="run-env", classes="env-display"),
            Static("\nüìò Backend (Django):", classes="log-label"),
            Log(id="backend-log", auto_scroll=True),
            Static("\nüìó Frontend (React):", classes="log-label"),
            Log(id="frontend-log", auto_scroll=True),
            Static("", id="run-status"),
            Horizontal(
                Button("Detener Servidores", variant="error", id="stop-btn"),
                Button("Volver al Men√∫", variant="default", id="back-btn"),
                classes="button-row"
            ),
            id="run-container"
        )
        yield Footer()
    
    def on_mount(self):
        self.start_servers()
    
    @work(exclusive=True)
    async def start_servers(self):
        """Inicia los subprocesos de backend y frontend."""
        backend_log = self.query_one("#backend-log", Log)
        frontend_log = self.query_one("#frontend-log", Log)
        status = self.query_one("#run-status", Static)
        
        env = self.config.get_current_env()
        if env:
            os.environ["DATABASE_PATH"] = env["db_path"]
            os.environ["PDF_PATH"] = env["pdf_path"]
            backend_log.write_line(f"üìÅ Base de datos: {env['db_path']}")
            backend_log.write_line(f"üìÅ PDFs: {env['pdf_path']}")
        
        python_path = str(PROJECT_ROOT / "venv" / ("Scripts" if IS_WINDOWS else "bin") / "python")
        manage_py = str(BACKEND_DIR / "manage.py")
        
        # Iniciar backend
        backend_log.write_line("\nüîµ Iniciando servidor Django...")
        try:
            self.backend_process = subprocess.Popen(
                [python_path, manage_py, "runserver"],
                cwd=str(BACKEND_DIR),
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True,
                bufsize=1
            )
            backend_log.write_line("‚úÖ Backend iniciado en http://localhost:8000")
            self.is_running = True
        except Exception as e:
            backend_log.write_line(f"‚ùå Error iniciando backend: {str(e)}")
            status.update("‚ùå Error al iniciar servidores")
            return
        
        # Iniciar frontend
        frontend_log.write_line("\nüü¢ Iniciando servidor React...")
        try:
            npm_cmd = "npm.cmd" if IS_WINDOWS else "npm"
            self.frontend_process = subprocess.Popen(
                [npm_cmd, "start"],
                cwd=str(FRONTEND_DIR),
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True,
                bufsize=1
            )
            frontend_log.write_line("‚úÖ Frontend iniciado en http://localhost:3000")
        except Exception as e:
            frontend_log.write_line(f"‚ùå Error iniciando frontend: {str(e)}")
        
        status.update("‚úÖ Servidores en ejecuci√≥n | Presiona 'S' o Ctrl+C para detener")
        
        # Iniciar monitoreo de logs
        self.monitor_logs(backend_log, frontend_log)
    
    @work(exclusive=True, thread=True)
    def monitor_logs(self, backend_log, frontend_log):
        """Monitorea los logs de ambos procesos en un hilo separado."""
        while self.is_running:
            try:
                if self.backend_process and self.backend_process.poll() is None:
                    if self.backend_process.stdout:
                        line = self.backend_process.stdout.readline()
                        if line:
                            self.app.call_from_thread(backend_log.write_line, line.strip())
                
                if self.frontend_process and self.frontend_process.poll() is None:
                    if self.frontend_process.stdout:
                        line = self.frontend_process.stdout.readline()
                        if line:
                            self.app.call_from_thread(frontend_log.write_line, line.strip())
            except Exception:
                break # Salir del bucle si hay un error (ej. al cerrar)
    
    def stop_servers(self):
        """Detiene los servidores de forma segura."""
        if not self.is_running:
            return
            
        backend_log = self.query_one("#backend-log", Log)
        frontend_log = self.query_one("#frontend-log", Log)
        status = self.query_one("#run-status", Static)
        
        self.is_running = False
        status.update("‚è∏Ô∏è  Deteniendo servidores...")
        
        if self.backend_process:
            backend_log.write_line("\nüõë Deteniendo servidor Django...")
            try:
                self.backend_process.terminate()
                self.backend_process.wait(timeout=5)
                backend_log.write_line("‚úÖ Backend detenido")
            except Exception:
                self.backend_process.kill()
        
        if self.frontend_process:
            frontend_log.write_line("\nüõë Deteniendo servidor React...")
            try:
                self.frontend_process.terminate()
                self.frontend_process.wait(timeout=5)
                frontend_log.write_line("‚úÖ Frontend detenido")
            except Exception:
                self.frontend_process.kill()
        
        status.update("‚úÖ Servidores detenidos correctamente")
        self.notify("Servidores detenidos", severity="information")
    
    def on_button_pressed(self, event: Button.Pressed):
        if event.button.id == "stop-btn":
            self.action_stop_servers()
        elif event.button.id == "back-btn":
            self.action_back()
    
    def action_stop_servers(self):
        """Binding 's' para detener servidores."""
        self.stop_servers()
    
    def action_back(self):
        """Binding 'escape' para volver (solo si los servidores est√°n parados)."""
        if not self.is_running:
            self.app.pop_screen()
        else:
            self.notify("Det√©n los servidores primero (presiona 'S')", severity="warning")
    
    def on_unmount(self):
        """Asegurarse de detener servidores al salir de la pantalla."""
        self.stop_servers()